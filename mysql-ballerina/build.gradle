/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - MySQL Ballerina Generator'

configurations {
    jbalTools
    externalJars
}

dependencies {
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':mysql-native')
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions")
    }

}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.externalJars
}

def moduleName = "mysql"
def moduleOrg = "ballerina"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def tomlVersion = project.version.split("-")[0]
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def targetBallerinaJar = file("$project.projectDir/target/caches/jar_cache/${moduleOrg}/${moduleName}/${tomlVersion}/${moduleOrg}-${moduleName}-${tomlVersion}.jar")
def targetNativeJar = file("$project.rootDir/${moduleName}-native/build/libs/${moduleName}-native-${project.version}.jar")

task ballerinaBuild {
    inputs.dir file(project.projectDir)
    doLast {

        def distributionPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-${ballerinaLangVersion}"

        def originalConfig = ballerinaConfigFile.text
        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@project.path@", distributionPath)
        ballerinaConfigFile.text = newConfig

        def distributionBinPath = distributionPath + "/bin"

        // Build and populate caches
        if (!project.hasProperty("skipBallerinaTests")) {
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat test --offline --all"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/ballerina test --offline --all"
                }
            }
        }
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat build --offline --skip-tests --code-coverage -c ${moduleName}"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina build --offline --skip-tests --code-coverage -c ${moduleName}"
            }
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactCacheParent/caches/bir/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactCacheParent/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactCacheParent/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/target/caches/bir_cache")
            into file("$artifactCacheParent/caches/bir")
        }
        copy {
            from file("$project.projectDir/target/balo")
            into file("$artifactCacheParent/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from targetBallerinaJar
            into file("$artifactCacheParent/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
        }

        copy {
            from targetBallerinaJar
            into file("$artifactLibParent/libs")
        }

        copy {
            from targetNativeJar
            into file("$artifactLibParent/libs")
        }

        // Publish to central
        if (!project.version.endsWith('-SNAPSHOT') && ballerinaCentralAccessToken != null && project.hasProperty("publishToCentral")) {
            println("Publishing to the ballerina central..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat push ${moduleName}"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/ballerina push ${moduleName}"
                }
            }

        }
        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat doc --offline ${moduleName}"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina doc --offline ${moduleName}"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${moduleName}")
            into file("$project.projectDir/build/docs_parent/docs/${moduleName}")
        }
        ballerinaConfigFile.text = originalConfig
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerina-mysql")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

unpackJballerinaTools.dependsOn copyToLib
ballerinaBuild.dependsOn unpackJballerinaTools
ballerinaBuild.dependsOn ":mysql-native:build"
build.dependsOn ballerinaBuild
